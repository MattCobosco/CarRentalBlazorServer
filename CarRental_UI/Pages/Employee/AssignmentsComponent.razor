@page "/assignments"
@attribute [Authorize(Policy = "EmployeeOnly")]

@using UseCases.UseCaseInterfaces.AssignmentUseCaseInterfaces
@using UseCases.UseCaseInterfaces.EmployeeUseCaseInterfaces
@using UseCases.UseCaseInterfaces.AssignmentTypeUseCaseInterfaces
@using UseCases.UseCaseInterfaces.VehicleModelUseCaseInterfaces

@inject IViewAssignmentsUseCase _viewAssignmentsUseCase
@inject IGetEmployeeByGuidUseCase _getEmployeeByGuidUseCase
@inject IGetAssignmentTypeByIdUseCase _getAssignmentTypeByIdUseCase
@inject IGetVehicleModelByIdUseCase _getVehicleModelByIdUseCase

<h3>Assignments</h3>
<br/>
@if (_assignmentsUndone != null)
{
    {
        <h4>Undone</h4>
        <table class="table">
            <thead>
            <tr>
                <th>Type</th>
                <th>Date&Time</th>
                <th>Model</th>
                <th>Vehicle</th>
                <th>Assigned Employee</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var assignment in _assignmentsUndone)
            {
                <tr>
                    <td>@GetAssignmentTypeById(assignment.AssignmentTypeId)</td>
                    <td>@assignment.DateTime</td>
                    <td>@GetMakeModelFromVehicleModelId(assignment.VehicleModelId)</td>
                    <td>@assignment.FleetVehicleLicensePlate</td>
                    <td>@GetEmployeeNameByGuid(assignment.EmployeeGuid)</td>
                </tr>
            }
            </tbody>
        </table>
    }
}

<br/>

@if (_assignmentsDone != null)
{
    {
        <h4>Done</h4>
        <table class="table">
            <thead>
                <tr>
                    <th>Type</th>
                    <th>Date&Time</th>
                    <th>Model</th>
                    <th>Vehicle</th>
                    <th>Assigned Employee</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var assignment in _assignmentsDone)
            {
                <tr>
                    <td>@GetAssignmentTypeById(assignment.AssignmentTypeId)</td>
                    <td>@assignment.DateTime</td>
                    <td>@GetMakeModelFromVehicleModelId(assignment.VehicleModelId)</td>
                    <td>@assignment.FleetVehicleLicensePlate</td>
                    <td>@GetEmployeeNameByGuid(assignment.EmployeeGuid)</td>
                </tr>
            }
            </tbody>
        </table>
    }
}

@code {
    private List<Assignment> _assignments;
    private List<Assignment> _assignmentsDone;
    private List<Assignment> _assignmentsUndone;

    protected override async Task OnInitializedAsync()
    {
        _assignments = (await _viewAssignmentsUseCase.Execute()).ToList();
        _assignmentsDone = GetDoneAssignments(_assignments);
        _assignmentsUndone = GetUndoneAssignments(_assignments);
    }

    private string GetEmployeeNameByGuid(string employeeGuid)
    {
        var employee = _getEmployeeByGuidUseCase.Execute(employeeGuid).Result;

        if (employee != null)
            return employee.FirstName + employee.LastName;

        return "";
    }

    private string GetAssignmentTypeById(int assignmentTypeId)
    {
        return _getAssignmentTypeByIdUseCase.Execute(assignmentTypeId).Type;
    }

    private List<Assignment> GetDoneAssignments(List<Assignment> assignments)
    {
        return assignments.Where(a => a.IsDone).OrderBy(x=>x).OrderBy(a=>a.DateTime).ToList();
    }

    private List<Assignment> GetUndoneAssignments(List<Assignment> assignments)
    {
        return assignments.Where(a => !a.IsDone).OrderBy(a=>a.DateTime).ToList();
    }

    private string GetMakeModelFromVehicleModelId(int vehicleModelId)
    {
        var vehicleModel = _getVehicleModelByIdUseCase.Execute(vehicleModelId);
        return $"{vehicleModel.Make} {vehicleModel.Model}";
    }

}