@page "/assignments"
@attribute [Authorize(Policy = "EmployeeOnly")]

@using UseCases.UseCaseInterfaces.AssignmentUseCaseInterfaces
@using UseCases.UseCaseInterfaces.EmployeeUseCaseInterfaces
@using UseCases.UseCaseInterfaces.AssignmentTypeUseCaseInterfaces
@using UseCases.UseCaseInterfaces.BranchUseCaseInterfaces
@using UseCases.UseCaseInterfaces.VehicleModelUseCaseInterfaces

@inject NavigationManager _navigationManager
@inject IViewAssignmentsUseCase _viewAssignmentsUseCase
@inject IGetEmployeeByGuidUseCase _getEmployeeByGuidUseCase
@inject IGetAssignmentTypeByIdUseCase _getAssignmentTypeByIdUseCase
@inject IGetVehicleModelByIdUseCase _getVehicleModelByIdUseCase
@inject IViewEmployeesUseCase _viewEmployeesUseCase
@inject IAddEmployeeToTheAssignmentUseCase _addEmployeeToTheAssignmentUseCase
@inject IGetBranchByIdUseCase _getBranchByIdUseCase

<h3>Assignments</h3>
<br/>
@if (_assignmentsUndone != null)
{
    {
        <h4>Undone</h4>
        <br/>
        <AuthorizeView Policy="AdminLogisticianOnly">
            <select class="form-control" @bind="_employeeGuid">
                <option value=null>Select employee...</option>
                @foreach (var employee in _employees)
                {
                    <option value="@employee.EmployeeGuid">
                        @GetBranchNameByBranchId(employee.BranchId)
                        @employee.FirstName
                        @employee.LastName
                    </option>
                }
            </select>
            <br/>
        </AuthorizeView>
        <table class="table">
            <thead>
            <tr>
                <th>Type</th>
                <th>Date&Time</th>
                <th>Model</th>
                <th>Vehicle</th>
                <th>Branch</th>
                <th>Employee</th>
                <AuthorizeView Policy="AdminLogisticianOnly">
                    <th>Assign</th>
                </AuthorizeView>
            </tr>
            </thead>
            <tbody>
            @foreach (var assignment in _assignmentsUndone)
            {
                <tr>
                    <td>@GetAssignmentTypeById(assignment.AssignmentTypeId)</td>
                    <td>@assignment.DateTime</td>
                    <td>@GetMakeModelByVehicleModelId(assignment.VehicleModelId)</td>
                    <td>@assignment.FleetVehicleLicensePlate</td>
                    <td>@GetBranchNameByBranchId(assignment.BranchId)</td>
                    <td>@GetEmployeeNameByGuid(assignment.EmployeeGuid)</td>
                    <AuthorizeView Policy="AdminLogisticianOnly">
                        <td>
                            <button class="btn btn-primary" @onclick="() => OnClickAssign(assignment, _employeeGuid)">Assign</button>
                        </td>
                    </AuthorizeView>
                </tr>
            }
            </tbody>
        </table>
    }
}

<br/>

@if (_assignmentsDone != null)
{
    {
        <h4>Done</h4>
        <table class="table">
            <thead>
                <tr>
                    <th>Type</th>
                    <th>Date&Time</th>
                    <th>Model</th>
                    <th>Vehicle</th>
                    <th>Branch</th>
                    <th>Employee</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var assignment in _assignmentsDone)
            {
                <tr>
                    <td>@GetAssignmentTypeById(assignment.AssignmentTypeId)</td>
                    <td>@assignment.DateTime</td>
                    <td>@GetMakeModelByVehicleModelId(assignment.VehicleModelId)</td>
                    <td>@assignment.FleetVehicleLicensePlate</td>
                    <td>@GetBranchNameByBranchId(assignment.BranchId)</td>
                    <td>@GetEmployeeNameByGuid(assignment.EmployeeGuid)</td>
                </tr>
            }
            </tbody>
        </table>
    }
}

@code {
    private List<Assignment> _assignments;
    private List<Assignment> _assignmentsDone;
    private List<Assignment> _assignmentsUndone;
    private List<Employee> _employees;
    private string _employeeGuid;

    protected override async Task OnInitializedAsync()
    {
        _assignments = (await _viewAssignmentsUseCase.Execute()).ToList();
        _assignmentsDone = GetDoneAssignments(_assignments);
        _assignmentsUndone = GetUndoneAssignments(_assignments);
        _employees = (await _viewEmployeesUseCase.Execute()).ToList();
    }

    private string GetEmployeeNameByGuid(string employeeGuid)
    {
        if (employeeGuid == null) return "";
        var employee = _getEmployeeByGuidUseCase.Execute(employeeGuid);

        if (employee != null)
        {
            return $"{employee.FirstName} {employee.LastName}";
        }
        return "";
    }

    private string GetAssignmentTypeById(int assignmentTypeId)
    {
        return _getAssignmentTypeByIdUseCase.Execute(assignmentTypeId).Type;
    }

    private List<Assignment> GetDoneAssignments(IEnumerable<Assignment> assignments)
    {
        return assignments.Where(a => a.IsDone).OrderBy(a => a.DateTime).ToList();
    }

    private List<Assignment> GetUndoneAssignments(IEnumerable<Assignment> assignments)
    {
        return assignments.Where(a => !a.IsDone).OrderBy(a => a.DateTime).ToList();
    }

    private string GetMakeModelByVehicleModelId(int vehicleModelId)
    {
        var vehicleModel = _getVehicleModelByIdUseCase.Execute(vehicleModelId);
        return $"{vehicleModel.Make} {vehicleModel.Model}";
    }

    private string GetBranchNameByBranchId(int branchId)
    {
        var branch = _getBranchByIdUseCase.Execute(branchId);
        return branch.Name;
    }

    private void OnClickAssign(Assignment assignment, string employeeGuid)
    {
        _addEmployeeToTheAssignmentUseCase.Execute(assignment, employeeGuid);
        StateHasChanged();
    }

}