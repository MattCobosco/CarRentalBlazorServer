@page "/editreservation/{reservationGuid}"
@attribute [Authorize(Policy = "AdminLogisticianOnly")]
@using UseCases.UseCaseInterfaces.ReservationUseCaseInterfaces
@using UseCases.UseCaseInterfaces.BranchUseCaseInterfaces
@using UseCases.UseCaseInterfaces.FleetVehicleUseCaseInterfaces
@using UseCases.UseCaseInterfaces.VehicleModelUseCaseInterfaces
@using UseCases.UseCaseInterfaces.AssignmentUseCaseInterfaces

@inject NavigationManager _navigationManager
@inject IViewBranchesUseCase _viewBranchesUseCase
@inject IViewFleetVehiclesUseCase _viewFleetVehiclesUseCase
@inject IGetReservationPriceUseCase _getReservationPriceUseCase
@inject IGetVehicleModelByLicensePlateUseCase _getVehicleModelByLicensePlateUseCase
@inject IEditReservationUseCase _editReservationUseCase
@inject IGetReservationByGuidUseCase _getReservationByGuidUseCase
@inject IViewVehicleModelsUseCase _viewVehicleModelsUseCase
@inject IUpdateTasksOnReservationUpdateUseCase _updateTasksOnReservationUpdateUseCase

<h3>Edit Reservation</h3>
<br />

@if (_reservation != null)
{
    <EditForm Model="_reservation" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="startDate">Start Date</label>
            <InputDate id="startDate" @bind-Value="_reservation.StartDateTime" class="form-control"></InputDate>
        </div>

        <div class="form-group">
            <label for="endDate">End Date</label>
            <InputDate id="endDate" @bind-Value="_reservation.EndDateTime" class="form-control"></InputDate>
        </div>

        <div class="form-group">
            <label for="startBranchName">Start Branch</label>
            <InputSelect id="startBranchName" @bind-Value="_reservation.StartBranchId" class="form-control">
                @foreach (var branch in _branches)
                    {
                    <option value="@branch.BranchId">@branch.Name</option>
                    }
            </InputSelect>
        </div>

        <div class="form-group">
            <label for="endBranchName">End Branch</label>
            <InputSelect id="endBranchName" @bind-Value="_reservation.EndBranchId" class="form-control">
                @foreach (var branch in _branches)
                {
                    <option value="@branch.BranchId">@branch.Name</option>
                }
            </InputSelect>
        </div>

        <div class="form-group">
            <label for="fleetVehicleLicensePlate">Model</label>
            <InputSelect id="fleetVehicleLicensePlate" @bind-Value="_reservation.VehicleModelId" class="form-control">
                @foreach (var model in _vehicleModels)
                {
                    <option value="@model.VehicleModelId"> @model.Make @model.Model</option>
                }
            </InputSelect>
        </div>

        <div class="form-group">
            <label for="fleetVehicleLicensePlate">Vehicle</label>
            <InputSelect id="fleetVehicleLicensePlate" @bind-Value="_reservation.FleetVehicleLicensePlate" class="form-control">
                @foreach (var vehicle in _fleetVehicles)
                    {
                    <option value="@vehicle.FleetVehicleLicensePlate">@vehicle.FleetVehicleLicensePlate - @vehicle.VehicleModel.Make @vehicle.VehicleModel.Model</option>
                    }
            </InputSelect>
        </div>

        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-primary" @onclick="OnCancel">Cancel</button>
    </EditForm>
}

@code {

    [Parameter]
    public string ReservationGuid { get; set; }

    private Reservation _reservation;
    private List<FleetVehicle> _fleetVehicles;
    private List<VehicleModel> _vehicleModels;
    private List<Branch> _branches;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        LoadLists();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        var reservation = _getReservationByGuidUseCase.Execute(ReservationGuid);
        _reservation = new Reservation
        {
            ReservationGuid = reservation.ReservationGuid,
            StartDateTime = reservation.StartDateTime,
            EndDateTime = reservation.EndDateTime,
            StartBranchId = reservation.StartBranchId,
            EndBranchId = reservation.EndBranchId,
            VehicleModelId = reservation.VehicleModelId,
            FleetVehicleLicensePlate = reservation.FleetVehicleLicensePlate,
            CustomerGuid = reservation.CustomerGuid,
            StartAssignmentGuid = reservation.StartAssignmentGuid,
            EndAssignmentGuid = reservation.EndAssignmentGuid
        };
    }

    private async void OnValidSubmit()
    {
        _reservation.Price = _getReservationPriceUseCase.Execute(_reservation.VehicleModelId, _reservation.StartDateTime, _reservation.EndDateTime);
        _editReservationUseCase.Execute(_reservation);
        await _updateTasksOnReservationUpdateUseCase.Execute(_reservation);
        _navigationManager.NavigateTo("/reservations");
    }

    private void OnCancel()
    {
        _navigationManager.NavigateTo("/reservations");
    }

    private void LoadLists()
    {
        _fleetVehicles = _viewFleetVehiclesUseCase.Execute()?.ToList();
        _branches = _viewBranchesUseCase.Execute()?.ToList();
        _vehicleModels = _viewVehicleModelsUseCase.Execute()?.ToList();
    }

}