@page "/reservations"
@attribute [Authorize(Policy = "EmployeeOnly")]
@using UseCases.UseCaseInterfaces.ReservationUseCaseInterfaces
@using UseCases.UseCaseInterfaces.VehicleModelUseCaseInterfaces
@using UseCases.UseCaseInterfaces.BranchUseCaseInterfaces
@using UseCases.UseCaseInterfaces.CustomerUseCaseInterfaces
@using UseCases.UseCaseInterfaces.EmployeeUseCaseInterfaces

@inject NavigationManager _navigationManager
@inject IViewConfirmedReservationsUseCase _viewConfirmedReservationsUseCase
@inject IViewUnconfirmedReservationsUseCase _viewUnconfirmedReservationsUseCase
@inject IGetVehicleModelByLicensePlateUseCase _getVehicleModelByLicensePlateUseCase
@inject IGetBranchByIdUseCase _getBranchByIdUseCase
@inject IDeleteReservationUseCase _deleteReservationUseCase
@inject IGetCustomerByGuidUseCase _getCustomerByGuidUseCase
@inject IGetVehicleModelByIdUseCase _getVehicleModelByIdUseCase
@inject IGetEmployeeByGuidUseCase _getEmployeeByGuidUseCase
@inject IConfirmReservationUseCase _confirmReservationUseCase

<h3>Reservations</h3>
<br/>

<AuthorizeView Policy="AdminLogisticianOnly">
    <button type="button" @onclick="AddReservationOnClick" class="btn btn-primary">Add Reservation</button>
    <br/>
    <br/>
</AuthorizeView>

@if (_reservationsConfirmed != null)
{
    <h4>
        Confirmed
    </h4>
    <table class="table">
        <thead>
        <tr>
            <th>Start Branch</th>
            <th>End Branch</th>
            <th>Start Date&Time</th>
            <th>End Date&Time</th>
            <th>Price</th>
            <th>Vehicle</th>
            <th>Customer</th>
            <AuthorizeView Policy="AdminLogisticianOnly">
                <th>Actions</th>
            </AuthorizeView>
        </tr>
        </thead>
        <tbody>
        @foreach (var reservation in _reservationsConfirmed)
        {
            <tr>
                <td>@GetBranchById(reservation.StartBranchId).Name</td>
                <td>@GetBranchById(reservation.EndBranchId).Name</td>
                <td>@reservation.StartDateTime</td>
                <td>@reservation.EndDateTime</td>
                <td>@reservation.Price</td>
                <td>
                    @reservation.FleetVehicleLicensePlate
                    @GetVehicleModelById(reservation.VehicleModelId).Model
                </td>
                <td>
                    @GetCustomerByGuid(reservation.CustomerGuid).FirstName
                    @GetCustomerByGuid(reservation.CustomerGuid).LastName -
                    @GetCustomerByGuid(reservation.CustomerGuid).Pesel
                </td>
                <td>
                    <AuthorizeView Policy="AdminLogisticianOnly">
                        <button type="button" class="btn btn-link" @onclick="@(() => EditReservation(reservation))">Edit</button>
                    </AuthorizeView>
                    <AuthorizeView Policy="AdminOnly">
                        <button type="button" class="btn btn-link" @onclick="@(() => DeleteReservation(reservation.ReservationGuid))">Delete</button>
                    </AuthorizeView>
                </td>

            </tr>
        }
        </tbody>
    </table>
}

@if (_reservationsUnconfirmed != null)
{
    <h4>
        Unconfirmed
    </h4>
    <table class="table">
        <thead>
        <tr>
            <th>Start Branch</th>
            <th>End Branch</th>
            <th>Start Date&Time</th>
            <th>End Date&Time</th>
            <th>Price</th>
            <th>Vehicle</th>
            <th>Customer</th>
            <AuthorizeView Policy="AdminLogisticianOnly">
                <th>Actions</th>
            </AuthorizeView>
        </tr>
        </thead>
        <tbody>
        @foreach (var reservation in _reservationsUnconfirmed)
        {
            <tr>
                <td>@GetBranchById(reservation.StartBranchId).Name</td>
                <td>@GetBranchById(reservation.EndBranchId).Name</td>
                <td>@reservation.StartDateTime</td>
                <td>@reservation.EndDateTime</td>
                <td>@reservation.Price</td>
                <td>
                    @reservation.FleetVehicleLicensePlate
                    @GetVehicleModelById(reservation.VehicleModelId).Model
                </td>
                <td>
                    @GetCustomerByGuid(reservation.CustomerGuid).FirstName
                    @GetCustomerByGuid(reservation.CustomerGuid).LastName -
                    @GetCustomerByGuid(reservation.CustomerGuid).Pesel
                </td>
                <td>
                    <AuthorizeView Policy="AdminLogisticianOnly">
                        <button type="button" class="btn btn-link" @onclick="@(() => EditReservation(reservation))">Edit</button>
                        <button type="button" class="btn btn-primary" @onclick="@(() => ConfirmReservationOnClick(reservation.ReservationGuid))">Confirm</button>
                    </AuthorizeView>
                    <AuthorizeView Policy="AdminOnly">
                        <button type="button" class="btn btn-link" @onclick="@(() => DeleteReservation(reservation.ReservationGuid))">Delete</button>
                    </AuthorizeView>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {

    private List<Reservation> _reservationsConfirmed;
    private List<Reservation> _reservationsUnconfirmed;

    protected override async Task OnInitializedAsync()
    {
        _reservationsConfirmed = (await _viewConfirmedReservationsUseCase.Execute()).ToList();
        _reservationsUnconfirmed = (await _viewUnconfirmedReservationsUseCase.Execute()).ToList();
    }

    private void AddReservationOnClick()
    {
        _navigationManager.NavigateTo("/addreservation");
    }

    private void EditReservation(Reservation reservation)
    {
        _navigationManager.NavigateTo($"/editreservation/{reservation.ReservationGuid}");
    }

    private async Task DeleteReservation(string reservationGuid)
    {
        _deleteReservationUseCase.Delete(reservationGuid);
        await OnInitializedAsync();
    }

    private VehicleModel GetVehicleModelById(int vehicleModelId)
    {
        return _getVehicleModelByIdUseCase.Execute(vehicleModelId);
    }

    private Branch GetBranchById(int branchId)
    {
        return _getBranchByIdUseCase.Execute(branchId);
    }

    private Customer GetCustomerByGuid(string customerGuid)
    {
        return _getCustomerByGuidUseCase.Execute(customerGuid);
    }

    private async Task ConfirmReservationOnClick(string reservationGuid)
    {
        _confirmReservationUseCase.Confirm(reservationGuid);
        await OnInitializedAsync();
    }

}